// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  wallets       Wallet[]
  contacts      Contact[]
  rules         Rule[]
  webhookEvents WebhookEvent[]

  @@map("users")
}

model Wallet {
  id               String   @id @default(cuid())
  userId           String
  circleUserId     String?
  circleWalletId   String?
  chain            String   // ethereum, base, arbitrum, polygon
  address          String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  executions Execution[]

  @@unique([userId, chain])
  @@map("wallets")
}

model Contact {
  id        String   @id @default(cuid())
  userId    String
  name      String
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
  @@map("contacts")
}

enum RuleStatus {
  ACTIVE
  PAUSED
  COMPLETED
  FAILED
}

model Rule {
  id        String     @id @default(cuid())
  userId    String
  type      String     // schedule, conditional
  json      Json       // RuleJSON
  status    RuleStatus @default(ACTIVE)
  nextRunAt DateTime?
  lastRunAt DateTime?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  executions Execution[]
  quotes     Quote[]

  @@map("rules")
}

enum ExecutionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

model Execution {
  id              String          @id @default(cuid())
  ruleId          String
  walletId        String?
  status          ExecutionStatus @default(PENDING)
  chain           String?
  feeUsd          Float?
  txHash          String?
  errorMessage    String?
  idempotencyKey  String?         @unique
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  rule   Rule    @relation(fields: [ruleId], references: [id], onDelete: Cascade)
  wallet Wallet? @relation(fields: [walletId], references: [id])

  @@map("executions")
}

model Quote {
  id             String   @id @default(cuid())
  ruleId         String
  chain          String
  feeEstimateUsd Float
  etaSeconds     Int
  explanation    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  rule Rule @relation(fields: [ruleId], references: [id], onDelete: Cascade)

  @@map("quotes")
}

model WebhookEvent {
  id        String   @id @default(cuid())
  userId    String?
  type      String
  payload   Json
  processed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id])

  @@map("webhook_events")
}