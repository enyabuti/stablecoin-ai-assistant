// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  wallets       Wallet[]
  contacts      Contact[]
  rules         Rule[]
  webhookEvents WebhookEvent[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Wallet {
  id               String   @id @default(cuid())
  userId           String
  circleUserId     String?
  circleWalletId   String?
  chain            String   // ethereum, base, arbitrum, polygon
  address          String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  executions Execution[]

  @@unique([userId, chain])
  @@map("wallets")
}

model Contact {
  id        String   @id @default(cuid())
  userId    String
  name      String
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
  @@map("contacts")
}

enum RuleStatus {
  ACTIVE
  PAUSED
  COMPLETED
  FAILED
}

model Rule {
  id        String     @id @default(cuid())
  userId    String
  type      String     // schedule, conditional
  json      Json       // RuleJSON
  status    RuleStatus @default(ACTIVE)
  nextRunAt DateTime?
  lastRunAt DateTime?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  executions Execution[]
  quotes     Quote[]

  @@map("rules")
}

enum ExecutionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

model Execution {
  id              String          @id @default(cuid())
  ruleId          String
  walletId        String?
  status          ExecutionStatus @default(PENDING)
  chain           String?
  feeUsd          Float?
  txHash          String?
  errorMessage    String?
  idempotencyKey  String?         @unique
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  rule   Rule    @relation(fields: [ruleId], references: [id], onDelete: Cascade)
  wallet Wallet? @relation(fields: [walletId], references: [id])

  @@map("executions")
}

model Quote {
  id             String   @id @default(cuid())
  ruleId         String
  chain          String
  feeEstimateUsd Float
  etaSeconds     Int
  explanation    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  rule Rule @relation(fields: [ruleId], references: [id], onDelete: Cascade)

  @@map("quotes")
}

model WebhookEvent {
  id        String   @id @default(cuid())
  userId    String?
  type      String
  payload   Json
  processed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id])

  @@map("webhook_events")
}